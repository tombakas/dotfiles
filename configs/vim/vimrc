" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

let mapleader = ","

call plug#begin("~/.vim/plugged")
source $DOTFILE_DIR/configs/vim/common_pluggins.vimrc
call plug#end()

source $DOTFILE_DIR/configs/vim/plug_configs/utility_functions.vim
source $DOTFILE_DIR/configs/vim/plug_configs/common_config.vim
source $DOTFILE_DIR/configs/vim/plug_configs/common_mappings.vim

autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2
autocmd FileType json,yaml setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType css,scss,less,typescript,cpp,hpp setlocal shiftwidth=2 tabstop=2

" Indentation for yaml
au BufRead *.yml call setlocal shiftwidth=2 tabstop=2 softtabstop=2

" All html is djangohtml
au BufNewFile,BufRead *.html set filetype=htmldjango

" mundo
map <leader>bb :MundoToggle<CR>

"taglist
nnoremap <F3> :TagbarToggle<CR>
augroup yaml_ft
  au!
  autocmd BufNewFile,BufRead *.yaml let g:tagbar_width = 70
augroup END
let g:tagbar_width = 40
let g:tagbar_type_yaml = {
            \ 'ctagstype' : 'yaml',
            \ 'kinds'     : [
                \ 'p:property:1:0',
                \ 'e:endpoint:1:0',
                \ 'd:definition:1:0',
            \ ],
            \ }
let g:tagbar_type_javascript = {
      \ 'ctagstype': 'javascript',
      \ 'kinds': [
          \ 'f:functions',
          \ 'c:constants',
      \ ]}

"jedi
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#show_call_signatures = 1
let g:jedi#smart_auto_mappings = 0

"autopairs
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'
let g:AutoPairsMapCh = 0
inoremap <C-l> <DEL>
autocmd FileType html,htmldjango let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`', '<':'>'}

"airline
let g:airline_theme='onedark'
let g:airline_right_sep=''
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" emmet
autocmd FileType html,htmldjango imap <C-h> <plug>(emmet-expand-abbr)
autocmd FileType html,htmldjango imap <C-j> <plug>(emmet-move-next)
autocmd FileType html,htmldjango imap <C-k> <plug>(emmet-move-prev)

" indent guide
let g:indent_guides_auto_colors = 1
let g:indent_guides_tab_guides = 1

" argument suggestions
set completeopt+=preview

" run python from file
" map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>

" simply fold
let g:SimpylFold_docstring_preview = 1

" Next and previous buffer mappigns
nmap <leader>m :bp<CR>
map <leader>. :bn<CR>

" Default html files to javascripthtml
au BufRead *.html set filetype=html.javascript

" fzf
command! FZFLines call fzf#run({
            \   'source':  <sid>buffer_lines(),
            \   'sink':    function('<sid>line_handler'),
            \   'options': '--extended --nth=3..',
            \   'down':    '60%'
            \})

nnoremap <leader>f :FZFLines<CR>
nnoremap <leader>l :BLines<CR>
nnoremap <leader>a :Ag 
nmap <leader>t :FZF<CR>
nmap <leader>be :Buffers<CR>
nmap <Up> :History<CR>
nmap <leader>g :GFiles?<CR>

" Fountain
au BufRead,BufNewFile *.fountain setfiletype fountain

" Ultisnips
"let g:UltiSnipsExpandTrigger = "<nop>"
let g:ulti_expand_or_jump_res = 0
function ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"
let g:UltiSnipsExpandTrigger='<C-]>' "Trigger snippet
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Python fold method
au FileType python set foldmethod=expr

" FZF buffer search function
function! s:line_handler(l)
    let keys = split(a:l, ':\t')
    exec 'buf' keys[0]
    exec keys[1]
    normal! ^zz
endfunction

function! s:buffer_lines()
    let res = []
    for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
        call extend(res, map(getbufline(b,0,"$"), 'bufname(b) . ":\t" . (v:key + 1) . ":\t" . v:val '))
    endfor
    return res
endfunction

let g:rustc_path = $HOME . '/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc'
let g:ycm_rust_src_path = $HOME . '/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'

let g:python_host_prog  = $HOME . '/local/neovim_envs/neovim2/bin/python'
let g:python3_host_prog  = $HOME . '/local/neovim_envs/neovim3/bin/python'

let g:ale_linters = {
            \   'typescript': ['tslint', 'tsserver', 'eslint'],
            \   'python': ['flake8']
            \}


let g:ale_python_pyflakes_executable = "/home/tomas/local/neovim_envs/neovim3/bin/pyflakes"
let g:ale_python_pylint_executable = "/home/tomas/local/neovim_envs/neovim3/bin/pylint"

let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = "-m flake8 --ignore=E501"

let g:ale_set_loclist = 1
let g:ale_set_quickfix = 1

function! Toggle_flake8_python_executable()
    if g:ale_python_flake8_executable == g:python3_host_prog
        echom "Setting flake 8 executable to python"
        let g:ale_python_flake8_executable = g:python_host_prog
    elseif g:ale_python_flake8_executable == g:python_host_prog
        echom "Setting flake 8 executable to python3"
        let g:ale_python_flake8_executable = g:python3_host_prog
    endif
    ALELint
endfunction

autocmd FileType python nmap <leader><leader>p :call Toggle_flake8_python_executable()<CR>

let g:airline#extensions#tabline#enabled = 1

" Deoplete
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<c-p>" : "\<S-tab>"
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><C-y> deoplete#close_popup()."\<ESC>"

call deoplete#custom#source('ultisnips', 'matchers', ['matcher_full_fuzzy'])

" Black
let g:black_virtualenv = $HOME . '/local/environments/black'
nmap <leader>b :Black<CR>

" Polyglot
let g:python_highlight_file_headers_as_comments=1

" JW reload
autocmd BufWritePost * silent !/home/tomas/Documents/dotfiles/jw/reload.py %:p

" clang
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -1,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

let g:python_highlight_file_headers_as_comments=1

" vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
